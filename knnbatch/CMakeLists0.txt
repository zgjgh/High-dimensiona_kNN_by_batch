cmake_minimum_required(VERSION 3.17)
project(batch_knn)

set(CMAKE_CXX_STANDARD 14)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")

add_executable(batch_knn main.cpp Cluster.h Clusters.cpp Clusters.h DataBase.cpp DataBase.h HDR_Tree.cpp HDR_Tree.h Item.cpp Item.h itemCluster.h itemClusters.cpp itemClusters.h itemDataBase.cpp itemDataBase.h itemHDR_Tree.cpp itemHDR_Tree.h itemLeafNode.cpp itemLeafNode.h itemNode.cpp itemNode.h itemNonLeafNode.cpp itemNonLeafNode.h LeafNode.cpp LeafNode.h Node.cpp Node.h NonLeafNode.cpp NonLeafNode.h User.cpp User.h Clusteri.h Clustersi.h Clustersi.cpp BPlusTree.h BPlusTree.cpp Clusteru.h Clustersu.h Clustersu.cpp userNode.h userNode.cpp userLeafNode.h userLeafNode.cpp userNonLeafNode.h userNonLeafNode.cpp Littletree.h Littletree.cpp Cluster_origin.h Cluster_origin.cpp)



# 因为大量使用模板,导致代码增大,MSVC下要用/bigobj选项,否则会报错:error C1128
# GNU compiler 要用 -Wa,-mbig-obj 选项
#target_compile_options(batch_knn
#PRIVATE
#$<$<CXX_COMPILER_ID:GNU>:-Wa,-mbig-obj>)




set(CMAKE_BUILD_TYPE "Release")




# C++14，纯标准
cmake_minimum_required(VERSION 3.17)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
project(batch_knn)

# 单配置生成器（Makefiles/Ninja）默认用 Release
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# 可选：如需解决“section exceeds object file format limit”等再开
option(ENABLE_BIG_OBJECTS "Enable big object flags if you hit section limits" OFF)

add_executable(batch_knn
        main.cpp
        Clusters.cpp DataBase.cpp HDR_Tree.cpp Item.cpp
        itemClusters.cpp itemDataBase.cpp itemHDR_Tree.cpp itemLeafNode.cpp
        itemNode.cpp itemNonLeafNode.cpp LeafNode.cpp Node.cpp NonLeafNode.cpp
        User.cpp Clustersi.cpp BPlusTree.cpp Clustersu.cpp
        userNode.cpp userLeafNode.cpp userNonLeafNode.cpp
        Littletree.cpp Cluster_origin.cpp
        # 头文件写不写都行，仅供 IDE 索引
        Cluster.h Clusters.h DataBase.h HDR_Tree.h Item.h
        itemCluster.h itemClusters.h itemDataBase.h itemHDR_Tree.h
        itemLeafNode.h itemNode.h itemNonLeafNode.h LeafNode.h Node.h
        NonLeafNode.h User.h Clusteri.h Clustersi.h BPlusTree.h
        Clusteru.h Clustersu.h userNode.h userLeafNode.h userNonLeafNode.h
        Littletree.h Cluster_origin.h
        )

# -------- 快 & 稳 的编译/链接选项 --------
if(MSVC)
    # /O2 用于 Release，/Zi 默认关闭；/MP 并行编译能明显加速
    target_compile_options(batch_knn PRIVATE /W3 /MP)
    if(ENABLE_BIG_OBJECTS)
        target_compile_options(batch_knn PRIVATE /bigobj)
    endif()
    # 确保 Release 不生成 PDB（进一步加快链接）
    set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<$<CONFIG:Debug>:ProgramDatabase>")
else()
    target_compile_options(batch_knn PRIVATE -Wall -Wextra -Wno-unused-parameter)

    if(APPLE)
        # macOS: 尽量瘦身（等价于自动移除未用符号）
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,-dead_strip")
    else()
        # GNU/Clang on Linux/MinGW: strip + as-needed，加快链接、减小体积
        if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
            set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -s -Wl,--as-needed")
        endif()
    endif()

    if(ENABLE_BIG_OBJECTS AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(batch_knn PRIVATE -Wa,-mbig-obj)
    endif()
endif()


# 显式关闭 LTO（部分平台默认启用会拖慢链接）
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF)

# 可选安装
install(TARGETS batch_knn RUNTIME DESTINATION bin)





cmake_minimum_required(VERSION 3.12)
project(batch_knn LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 单配置生成器（Makefiles/Ninja）默认 Release；
# MSVC/Xcode 这种多配置生成器用 --config Release 选择
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# 保持和你原版一样：强制所有配置加上 -g
# （这会让 Release 里也带调试符号，避免优化暴露潜在 UB，
#   和你原来“能跑”的情况一致）
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")

add_executable(batch_knn
        main.cpp
        Clusters.cpp DataBase.cpp HDR_Tree.cpp Item.cpp
        itemClusters.cpp itemDataBase.cpp itemHDR_Tree.cpp itemLeafNode.cpp
        itemNode.cpp itemNonLeafNode.cpp LeafNode.cpp Node.cpp NonLeafNode.cpp
        User.cpp Clustersi.cpp BPlusTree.cpp Clustersu.cpp
        userNode.cpp userLeafNode.cpp userNonLeafNode.cpp
        Littletree.cpp Cluster_origin.cpp
        # 头文件放进来和你原版保持一致
        Cluster.h Clusters.h DataBase.h HDR_Tree.h Item.h
        itemCluster.h itemClusters.h itemDataBase.h itemHDR_Tree.h
        itemLeafNode.h itemNode.h itemNonLeafNode.h LeafNode.h Node.h
        NonLeafNode.h User.h Clusteri.h Clustersi.h BPlusTree.h
        Clusteru.h Clustersu.h userNode.h userLeafNode.h userNonLeafNode.h
        Littletree.h Cluster_origin.h
        )


cmake_minimum_required(VERSION 3.12)
project(batch_knn LANGUAGES CXX)

# --- C++ 标准 ---
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# --- 单配置生成器默认 Release（Makefiles/Ninja）---
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# --- 选项：遇到节数超限再开 ---
option(ENABLE_BIG_OBJECTS "Enable big object flags if needed" OFF)

# --- 选项：如遇到 Eigen 在 Release 下偶发崩溃，可打开以禁用对齐 ---
option(EIGEN_SAFE_MODE "Disable Eigen static alignment to avoid crashes" OFF)

add_executable(batch_knn
  main.cpp
  Clusters.cpp DataBase.cpp HDR_Tree.cpp Item.cpp
  itemClusters.cpp itemDataBase.cpp itemHDR_Tree.cpp itemLeafNode.cpp
  itemNode.cpp itemNonLeafNode.cpp LeafNode.cpp Node.cpp NonLeafNode.cpp
  User.cpp Clustersi.cpp BPlusTree.cpp Clustersu.cpp
  userNode.cpp userLeafNode.cpp userNonLeafNode.cpp
  Littletree.cpp Cluster_origin.cpp

  # 头文件保留（仅供 IDE 索引）
  Cluster.h Clusters.h DataBase.h HDR_Tree.h Item.h
  itemCluster.h itemClusters.h itemDataBase.h itemHDR_Tree.h
  itemLeafNode.h itemNode.h itemNonLeafNode.h LeafNode.h Node.h
  NonLeafNode.h User.h Clusteri.h Clustersi.h BPlusTree.h
  Clusteru.h Clustersu.h userNode.h userLeafNode.h userNonLeafNode.h
  Littletree.h Cluster_origin.h
)

# --- 调试/发布 的最小稳健配置 ---
if(MSVC)
  target_compile_options(batch_knn PRIVATE /MP)  # 并行编译

  # 只在 Debug 生成调试信息；Release 不生成（更稳更快）
  # 如必须保留 Release 可调试，把两行的 CONFIG 改成 Release 即可
  target_compile_options(batch_knn PRIVATE $<$<CONFIG:Debug>:/Zi>)
  target_link_options(   batch_knn PRIVATE $<$<CONFIG:Debug>:/DEBUG>)

  if(ENABLE_BIG_OBJECTS)
    target_compile_options(batch_knn PRIVATE /bigobj)
  endif()
else()
  # GNU/Clang：只在 Debug 打开 -g（Release 不带，避免链接慢）
  target_compile_options(batch_knn PRIVATE $<$<CONFIG:Debug>:-g>)

  # 如确实遇到节数限制再开
  if(ENABLE_BIG_OBJECTS AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(batch_knn PRIVATE -Wa,-mbig-obj)
  endif()
endif()

# 如遇到 Eigen 在 Release 下对齐问题（少见但讨厌），打开此选项：
if(EIGEN_SAFE_MODE)
  target_compile_definitions(batch_knn PRIVATE
    EIGEN_MAX_ALIGN_BYTES=0
    EIGEN_DONT_ALIGN_STATICALLY=1
  )
endif()

# 关闭 LTO（不同平台默认值不一，关闭更一致）
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF)
